spring:
  config:
    activate:
      on-profile: prod
  mail:
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  redis:
    host: redis
    port: 6379
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://mysql:3306/playlist_master?allowMultiQueries=true
    druid:
      max-active: 20
      initial-size: 5
      min-idle: 5
      min-evictable-idle-time-millis: 300000
      max-wait: 60000
      validation-query: SELECT 1
      test-on-borrow: true
      test-on-return: true
      test-while-idle: true
      time-between-eviction-runs-millis: 60000
    type: com.alibaba.druid.pool.DruidDataSource
  security:
    filter:
      order: 20
    oauth2:
      client:
        registration:
          github:
            client-name: GitHub
            client-authentication-method: basic
            authorization-grant-type: authorization_code
            provider: github
            redirect-uri: https://playlistmaster.fun/login/oauth2/github
            scope:
              - user:email
          google:
            client-name: Google
            client-authentication-method: basic
            authorization-grant-type: authorization_code
            provider: google
            redirect-uri: https://playlistmaster.fun/login/oauth2/google
            scope:
              - user:email
        provider:
          github:
            authorization-uri: https://github.com/login/oauth/authorize
            token-uri: https://github.com/login/oauth/access_token
            user-info-uri: https://api.github.com/user
            user-name-attribute: login
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v2/userinfo
            user-name-attribute: name
  mvc:
    log-request-details: true

server:
  ssl:
    key-store: file:/data/playlistmaster.fun.jks
    key-store-type: JKS
    enabled: true
  port: 443
  http-port: 80
  servlet:
    session:
      timeout: 30d
  proxy:
    host: 172.17.0.1
    port: 7890
  reactive:
    session:
      cookie:
        http-only: false

pms:
  github-email-endpoint: "https://api.github.com/user/emails"

qqmusic:
  proxy:
    host: qqmusic-api
    port: 3300

ncm:
  proxy:
    host: ncm-api
    port: 3000

bucket4j:
  enabled: true
  filters:
    - cache-name: buckets
      strategy: ALL
      filter-method: servlet
      url: (\/(?!(sendcode|forgot\/password|bind\/email|register))).*
      #      url: (?!\/$)(\/(?!(sendcode|register|index\.html|robots\.txt|check|favicon\.ico|css|js|images|mpd|error))).*
      metrics:
        tags:
          - key: TIME
            expression: "@httpTools.getCurrentTime()"
          - key: IP
            expression: getRemoteAddr()
            types: REJECTED_COUNTER
          - key: UID
            expression: "@pmsUserDetailsUtil.getCurrentLoginUserId()?: 'anonymousUser'"
          - key: METHOD
            expression: getMethod()
          - key: URI
            expression: getRequestURI()
          - key: PARAM
            expression: getQueryString()
          - key: BODY
            expression: "@httpTools.getRequestBody(getReader())"
      rate-limits:
        - skip-condition: "@pmsUserDetailsUtil.getCurrentLoginUserRole() == 'ROLE_ADMIN'"
          expression: "@pmsUserDetailsUtil.getCurrentLoginUserId()?: getRemoteAddr()"
          #          expression: "(@pmsUserDetailsUtil.getCurrentLoginUserId()?: getRemoteAddr()).concat('::'+getRequestURI())"
          bandwidths:
            - capacity: 5
              time: 5
              unit: seconds
              fixed-refill-interval: 5
              fixed-refill-interval-unit: seconds
            - capacity: 30
              time: 1
              unit: minutes
              fixed-refill-interval: 1
              fixed-refill-interval-unit: minutes
    - cache-name: buckets
      strategy: ALL
      filter-method: servlet
      url: /forgot/password
      metrics:
        tags:
          - key: TIME
            expression: "@httpTools.getCurrentTime()"
          - key: IP
            expression: getRemoteAddr()
            types: REJECTED_COUNTER
          - key: UID
            expression: "@pmsUserDetailsUtil.getCurrentLoginUserId()?: 'anonymousUser'"
          - key: METHOD
            expression: getMethod()
          - key: URI
            expression: getRequestURI()
          - key: PARAM
            expression: getQueryString()
          - key: BODY
            expression: "@httpTools.getRequestBody(getReader())"
      rate-limits:
        - skip-condition: "@pmsUserDetailsUtil.getCurrentLoginUserRole() == 'ROLE_ADMIN'"
          expression: "@pmsUserDetailsUtil.getCurrentLoginUserId()?: getRemoteAddr()"
          bandwidths:
            - capacity: 1
              time: 1
              unit: minutes
    - cache-name: buckets
      strategy: ALL
      filter-method: servlet
      url: /sendcode
      metrics:
        tags:
          - key: TIME
            expression: "@httpTools.getCurrentTime()"
          - key: IP
            expression: getRemoteAddr()
            types: REJECTED_COUNTER
          - key: UID
            expression: "@pmsUserDetailsUtil.getCurrentLoginUserId()?: 'anonymousUser'"
          - key: METHOD
            expression: getMethod()
          - key: URI
            expression: getRequestURI()
          - key: PARAM
            expression: getQueryString()
          - key: BODY
            expression: "@httpTools.getRequestBody(getReader())"
      rate-limits:
        - skip-condition: "@pmsUserDetailsUtil.getCurrentLoginUserRole() == 'ROLE_ADMIN'"
          expression: "@pmsUserDetailsUtil.getCurrentLoginUserId()?: getRemoteAddr()"
          bandwidths:
            - capacity: 1
              time: 1
              unit: minutes
    - cache-name: buckets
      strategy: ALL
      filter-method: servlet
      url: /bind/email
      metrics:
        tags:
          - key: TIME
            expression: "@httpTools.getCurrentTime()"
          - key: IP
            expression: getRemoteAddr()
            types: REJECTED_COUNTER
          - key: UID
            expression: "@pmsUserDetailsUtil.getCurrentLoginUserId()?: 'anonymousUser'"
          - key: METHOD
            expression: getMethod()
          - key: URI
            expression: getRequestURI()
          - key: PARAM
            expression: getQueryString()
          - key: BODY
            expression: "@httpTools.getRequestBody(getReader())"
      rate-limits:
        - skip-condition: "@pmsUserDetailsUtil.getCurrentLoginUserRole() == 'ROLE_ADMIN'"
          expression: "@pmsUserDetailsUtil.getCurrentLoginUserId()?: getRemoteAddr()"
          bandwidths:
            - capacity: 1
              time: 1
              unit: minutes
    - cache-name: buckets
      strategy: ALL
      filter-method: servlet
      url: /register
      metrics:
        tags:
          - key: TIME
            expression: "@httpTools.getCurrentTime()"
          - key: IP
            expression: getRemoteAddr()
            types: REJECTED_COUNTER
          - key: UID
            expression: "@pmsUserDetailsUtil.getCurrentLoginUserId()?: 'anonymousUser'"
          - key: METHOD
            expression: getMethod()
          - key: URI
            expression: getRequestURI()
          - key: PARAM
            expression: getQueryString()
          - key: BODY
            expression: "@httpTools.getRequestBody(getReader())"
      rate-limits:
        - skip-condition: "@pmsUserDetailsUtil.getCurrentLoginUserRole() == 'ROLE_ADMIN'"
          expression: "@pmsUserDetailsUtil.getCurrentLoginUserId()?: getRemoteAddr()"
          bandwidths:
            - capacity: 3
              time: 1
              unit: minutes
---
debug: true

spring:
  config:
    activate:
      on-profile: dev
  mail:
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  redis:
    host: localhost
    port: 6379
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/playlist_master?allowMultiQueries=true
    druid:
      max-active: 20
      initial-size: 5
      min-idle: 5
      min-evictable-idle-time-millis: 300000
      max-wait: 60000
      validation-query: SELECT 1
      test-on-borrow: true
      test-on-return: true
      test-while-idle: true
      time-between-eviction-runs-millis: 60000
    type: com.alibaba.druid.pool.DruidDataSource
  security:
    filter:
      order: 20
    oauth2:
      client:
        registration:
          github:
            client-name: GitHub
            client-authentication-method: basic
            authorization-grant-type: authorization_code
            provider: github
            redirect-uri: https://localhost:8080/login/oauth2/github
            scope:
              - user:email
          google:
            client-name: Google
            client-authentication-method: basic
            authorization-grant-type: authorization_code
            provider: google
            redirect-uri: https://localhost:8080/login/oauth2/google
            scope:
              - user:email
        provider:
          github:
            authorization-uri: https://github.com/login/oauth/authorize
            token-uri: https://github.com/login/oauth/access_token
            user-info-uri: https://api.github.com/user
            user-name-attribute: login
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v2/userinfo
            user-name-attribute: name
  mvc:
    log-request-details: true
#  cache:
#    jcache:
#      provider: com.github.benmanes.caffeine.jcache.spi.CaffeineCachingProvider
#    cache-names:
#      - buckets
#    caffeine:
#      spec: maximumSize=1000000,expireAfterAccess=3600s

server:
  ssl:
    key-store: classpath:playlistmaster.fun.jks
    key-store-type: JKS
    enabled: true
  port: 8443
  http-port: 8080
  servlet:
    session:
      timeout: 30d
  proxy:
    host: localhost
    port: 7890
  reactive:
    session:
      cookie:
        http-only: false

pms:
  github-email-endpoint: "https://api.github.com/user/emails"

qqmusic:
  proxy:
    host: localhost
    port: 3300

ncm:
  proxy:
    host: localhost
    port: 3000

mybatis:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

bucket4j:
  enabled: true
  filters:
    - cache-name: buckets
      strategy: ALL
      filter-method: servlet
      url: (\/(?!(sendcode|forgot\/password|bind\/email|register))).*
      #      url: (?!\/$)(\/(?!(sendcode|register|index\.html|robots\.txt|check|favicon\.ico|css|js|images|mpd|error))).*
      metrics:
        tags:
          - key: TIME
            expression: "@httpTools.getCurrentTime()"
          - key: IP
            expression: getRemoteAddr()
            types: REJECTED_COUNTER
          - key: UID
            expression: "@pmsUserDetailsUtil.getCurrentLoginUserId()?: 'anonymousUser'"
          - key: METHOD
            expression: getMethod()
          - key: URI
            expression: getRequestURI()
          - key: PARAM
            expression: getQueryString()
          - key: BODY
            expression: "@httpTools.getRequestBody(getReader())"
      rate-limits:
        - skip-condition: "@pmsUserDetailsUtil.getCurrentLoginUserRole() == 'ROLE_ADMIN'"
          expression: "@pmsUserDetailsUtil.getCurrentLoginUserId()?: getRemoteAddr()"
          #          expression: "(@pmsUserDetailsUtil.getCurrentLoginUserId()?: getRemoteAddr()).concat('::'+getRequestURI())"
          bandwidths:
            - capacity: 5
              time: 5
              unit: seconds
              fixed-refill-interval: 5
              fixed-refill-interval-unit: seconds
            - capacity: 30
              time: 1
              unit: minutes
              fixed-refill-interval: 1
              fixed-refill-interval-unit: minutes
    - cache-name: buckets
      strategy: ALL
      filter-method: servlet
      url: /forgot/password
      metrics:
        tags:
          - key: TIME
            expression: "@httpTools.getCurrentTime()"
          - key: IP
            expression: getRemoteAddr()
            types: REJECTED_COUNTER
          - key: UID
            expression: "@pmsUserDetailsUtil.getCurrentLoginUserId()?: 'anonymousUser'"
          - key: METHOD
            expression: getMethod()
          - key: URI
            expression: getRequestURI()
          - key: PARAM
            expression: getQueryString()
          - key: BODY
            expression: "@httpTools.getRequestBody(getReader())"
      rate-limits:
        - skip-condition: "@pmsUserDetailsUtil.getCurrentLoginUserRole() == 'ROLE_ADMIN'"
          expression: "@pmsUserDetailsUtil.getCurrentLoginUserId()?: getRemoteAddr()"
          bandwidths:
            - capacity: 1
              time: 1
              unit: minutes
    - cache-name: buckets
      strategy: ALL
      filter-method: servlet
      url: /sendcode
      metrics:
        tags:
          - key: TIME
            expression: "@httpTools.getCurrentTime()"
          - key: IP
            expression: getRemoteAddr()
            types: REJECTED_COUNTER
          - key: UID
            expression: "@pmsUserDetailsUtil.getCurrentLoginUserId()?: 'anonymousUser'"
          - key: METHOD
            expression: getMethod()
          - key: URI
            expression: getRequestURI()
          - key: PARAM
            expression: getQueryString()
          - key: BODY
            expression: "@httpTools.getRequestBody(getReader())"
      rate-limits:
        - skip-condition: "@pmsUserDetailsUtil.getCurrentLoginUserRole() == 'ROLE_ADMIN'"
          expression: "@pmsUserDetailsUtil.getCurrentLoginUserId()?: getRemoteAddr()"
          bandwidths:
            - capacity: 1
              time: 1
              unit: minutes
    - cache-name: buckets
      strategy: ALL
      filter-method: servlet
      url: /bind/email
      metrics:
        tags:
          - key: TIME
            expression: "@httpTools.getCurrentTime()"
          - key: IP
            expression: getRemoteAddr()
            types: REJECTED_COUNTER
          - key: UID
            expression: "@pmsUserDetailsUtil.getCurrentLoginUserId()?: 'anonymousUser'"
          - key: METHOD
            expression: getMethod()
          - key: URI
            expression: getRequestURI()
          - key: PARAM
            expression: getQueryString()
          - key: BODY
            expression: "@httpTools.getRequestBody(getReader())"
      rate-limits:
        - skip-condition: "@pmsUserDetailsUtil.getCurrentLoginUserRole() == 'ROLE_ADMIN'"
          expression: "@pmsUserDetailsUtil.getCurrentLoginUserId()?: getRemoteAddr()"
          bandwidths:
            - capacity: 1
              time: 1
              unit: minutes
    - cache-name: buckets
      strategy: ALL
      filter-method: servlet
      url: /register
      metrics:
        tags:
          - key: TIME
            expression: "@httpTools.getCurrentTime()"
          - key: IP
            expression: getRemoteAddr()
            types: REJECTED_COUNTER
          - key: UID
            expression: "@pmsUserDetailsUtil.getCurrentLoginUserId()?: 'anonymousUser'"
          - key: METHOD
            expression: getMethod()
          - key: URI
            expression: getRequestURI()
          - key: PARAM
            expression: getQueryString()
          - key: BODY
            expression: "@httpTools.getRequestBody(getReader())"
      rate-limits:
        - skip-condition: "@pmsUserDetailsUtil.getCurrentLoginUserRole() == 'ROLE_ADMIN'"
          expression: "@pmsUserDetailsUtil.getCurrentLoginUserId()?: getRemoteAddr()"
          bandwidths:
            - capacity: 3
              time: 1
              unit: minutes